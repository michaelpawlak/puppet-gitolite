#
#   DO NOT EDIT !!!
#   Controlled by Puppet
#

# configuration variables for gitolite

# This file is in perl syntax.  But you do NOT need to know perl to edit it --
# just mind the commas, use single quotes unless you know what you're doing,
# and make sure the brackets and braces stay matched up!

# (Tip: perl allows a comma after the last item in a list also!)

# HELP for commands can be had by running the command with "-h".

# HELP for all the other FEATURES can be found in the documentation (look for
# "list of non-core programs shipped with gitolite" in the master index) or
# directly in the corresponding source file.

%RC = (

    # ------------------------------------------------------------------

    # default umask gives you perms of '0700'; see the rc file docs for
    # how/why you might change this
    UMASK                           =>  <%= @rc_umask %>,

    # look for "git-config" in the documentation
    GIT_CONFIG_KEYS                 =>  '<%= @rc_git_config_keys %>',

    # comment out if you don't need all the extra detail in the logfile
    LOG_EXTRA                       =>  <%= @rc_log_extra %>,
    # syslog options
    # 1. leave this section as is for normal gitolite logging
    # 2. uncomment this line to log only to syslog:
    # LOG_DEST                      => 'syslog',
    # 3. uncomment this line to log to syslog and the normal gitolite log:
    # LOG_DEST                      => 'syslog,normal',
    LOG_DEST                        => '<%  @rc_log_dest.each do |rc_log_dest_value| -%><%= rc_log_dest_value %>,<% end -%>',

    # roles.  add more roles (like MANAGER, TESTER, ...) here.
    #   WARNING: if you make changes to this hash, you MUST run 'gitolite
    #   compile' afterward, and possibly also 'gitolite trigger POST_COMPILE'

    ROLES => {
<%  @rc_roles.each do |roles_key, roles_value| -%>
        <%= roles_key -%>                     =>  <%= roles_value %>,
<%  end %>
    },

    # enable caching (currently only Redis).  PLEASE RTFM BEFORE USING!!!
    # CACHE                         =>  'Redis',
<% if @rc_cache -%>
    CACHE                           =>  <%= @rc_cache %>
<%  end -%>
    # ------------------------------------------------------------------

    # rc variables used by various features

    # the 'info' command prints this as additional info, if it is set
        # SITE_INFO                 =>  'Please see http://blahblah/gitolite for more help',
<%  if @rc_site_info -%>
    SITE_INFO                       =>  <%= @rc_site_info %>
<%  end -%> 
    # the CpuTime feature uses these
        # display user, system, and elapsed times to user after each git operation
        # DISPLAY_CPU_TIME          =>  1,
        # display a warning if total CPU times (u, s, cu, cs) crosses this limit
        # CPU_TIME_WARN_LIMIT       =>  0.1,
<%  if @rc_display_cpu_time -%>
    DISPLAY_CPU_TIME                =>  <%= @rc_display_cpu_time %>
<%  end -%>
<%  if @rc_cpu_time_warn_limit -%>
    CPU_TIME_WARN_LIMIT             =>  <%= @rc_cpu_time_warn_limit %>
<%  end -%>
    # the Mirroring feature needs this
        # HOSTNAME                  =>  "foo",
<%  if @rc_hostname -%>
    HOSTNAME                        =>  <%= @rc_hostname %>
<%  end -%> 
    # TTL for redis cache; PLEASE SEE DOCUMENTATION BEFORE UNCOMMENTING!
        # CACHE_TTL                 =>  600,
<%  if @rc_site_info -%>
    CACHE_TTL                       =>  <%= @rc_cache_ttl %>
<%  end -%> 
    # ------------------------------------------------------------------

    # suggested locations for site-local gitolite code (see cust.html)

        # this one is managed directly on the server
        # LOCAL_CODE                =>  "$ENV{HOME}/local",

        # or you can use this, which lets you put everything in a subdirectory
        # called "local" in your gitolite-admin repo.  For a SECURITY WARNING
        # on this, see http://gitolite.com/gitolite/non-core.html#pushcode
        # LOCAL_CODE                =>  "$rc{GL_ADMIN_BASE}/local",
<%  if @rc_site_info -%>
    LOCAL_CODE                      =>  <%= @rc_local_code %>
<%  end -%> 
    # ------------------------------------------------------------------

    # List of commands and features to enable

    ENABLE => [

        # COMMANDS

            # These are the commands enabled by default
<% @rc_enable_commands.each do |rc_commands| -%>
            '<%= rc_commands %>',
<% end -%>

            # Uncomment or add new commands here.
            # 'create',
            # 'fork',
            # 'mirror',
            # 'readme',
            # 'sskm',
            # 'D',

        # These FEATURES are enabled by default.

<% @rc_enable_features.each do |rc_features| -%>
            '<%= rc_features %>',
<% end -%>

        # These FEATURES are disabled by default; uncomment to enable.  If you
        # need to add new ones, ask on the mailing list :-)

        # user-visible behaviour

            # prevent wild repos auto-create on fetch/clone
            # 'no-create-on-read',
            # no auto-create at all (don't forget to enable the 'create' command!)
            # 'no-auto-create',

            # access a repo by another (possibly legacy) name
            # 'Alias',

            # give some users direct shell access.  See documentation in
            # sts.html for details on the following two choices.
            # "Shell $ENV{HOME}/.gitolite.shell-users",
            # 'Shell alice bob',

            # set default roles from lines like 'option default.roles-1 = ...', etc.
            # 'set-default-roles',

            # show more detailed messages on deny
            # 'expand-deny-messages',

            # show a message of the day
            # 'Motd',

        # system admin stuff

            # enable mirroring (don't forget to set the HOSTNAME too!)
            # 'Mirroring',

            # allow people to submit pub files with more than one key in them
            # 'ssh-authkeys-split',

            # selective read control hack
            # 'partial-copy',

            # manage local, gitolite-controlled, copies of read-only upstream repos
            # 'upstream',

            # updates 'description' file instead of 'gitweb.description' config item
            # 'cgit',

            # allow repo-specific hooks to be added
            # 'repo-specific-hooks',

        # performance, logging, monitoring...

            # be nice
            # 'renice 10',

            # log CPU times (user, system, cumulative user, cumulative system)
            # 'CpuTime',

        # syntactic_sugar for gitolite.conf and included files

            # allow backslash-escaped continuation lines in gitolite.conf
            # 'continuation-lines',

            # create implicit user groups from directory names in keydir/
            # 'keysubdirs-as-groups',

            # allow simple line-oriented macros
            # 'macros',

        # Kindergarten mode

            # disallow various things that sensible people shouldn't be doing anyway
            # 'Kindergarten',
    ],

);

# ------------------------------------------------------------------------------
# per perl rules, this should be the last line in such a file:
1;

# Local variables:
# mode: perl
# End:
# vim: set syn=perl:
